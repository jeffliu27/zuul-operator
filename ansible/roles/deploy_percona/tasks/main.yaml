---
#note did not add namespace in these files
# - name: Percona DB cluster Secret
#   k8s:
#     apiVersion: v1
#     kind: Secret
#     metadata:
#       name: my-cluster-secrets
#     type: Opaque
#     data:
#       root: cm9vdF9wYXNzd29yZA==
#       xtrabackup: YmFja3VwX3Bhc3N3b3Jk
#       monitor: bW9uaXRvcg==
#       clustercheck: Y2x1c3RlcmNoZWNrcGFzc3dvcmQ=
#       proxyadmin: YWRtaW5fcGFzc3dvcmQ=
#       pmmserver: c3VwYXxefHBheno=

- name: Create PerconaXtraDBCluster with pxc and proxies
  k8s:
    apiVersion: "{{ percona_api_version }}"
    kind: "{{ percona_cr_kind }}"
    metadata:
      name: "{{ percona_cluster_name }}"
      finalizers:
        - delete-pxc-pods-in-order
    #    - delete-proxysql-pvc
    #    - delete-pxc-pvc
    spec:
      secretsName: my-cluster-secrets
      sslSecretName: my-cluster-ssl
      sslInternalSecretName: my-cluster-ssl-internal
    #  pause: false
    #  updateStrategy: RollingUpdate
      pxc:
        # number of cluster nodes: was 3 before
        size: 1
        # allow unsafe configurations for running on Minikube
        allowUnsafeConfigurations: true
        image: percona/percona-xtradb-cluster-operator:1.1.0-pxc
    #    readinessDelaySec: 15
    #    livenessDelaySec: 300
    #    forceUnsafeBootstrap: false
    #    configuration: |
    #      [mysqld]
    #      wsrep_debug=ON
    #      wsrep_provider_options="gcache.size=1G; gcache.recover=yes"
    #    imagePullSecrets:
    #      - name: private-registry-credentials
    #    priorityClassName: high-priority
    #    annotations:
    #      iam.amazonaws.com/role: role-arn
    #    labels:
    #      rack: rack-22
        resources:
          requests:
            memory: 500m
            cpu: 200m
    #      limits:
    #        memory: 1G
    #        cpu: "1"
    #    nodeSelector:
    #      disktype: ssd
        affinity:
          antiAffinityTopologyKey: "none"
    #      advanced:
    #        nodeAffinity:
    #          requiredDuringSchedulingIgnoredDuringExecution:
    #            nodeSelectorTerms:
    #            - matchExpressions:
    #              - key: kubernetes.io/e2e-az-name
    #                operator: In
    #                values:
    #                - e2e-az1
    #                - e2e-az2
    #    tolerations: 
    #    - key: "node.alpha.kubernetes.io/unreachable"
    #      operator: "Exists"
    #      effect: "NoExecute"
    #      tolerationSeconds: 6000
        podDisruptionBudget:
          maxUnavailable: 1
    #      minAvailable: 0
        volumeSpec:
    #      emptyDir: {}
    #      hostPath:
    #        path: /data
    #        type: Directory
          persistentVolumeClaim:
    #        storageClassName: standard
    #        accessModes: [ "ReadWriteOnce" ]
            resources:
              requests:
                storage: 6Gi
        gracePeriod: 600
      proxysql:
        enabled: true
        size: 1
        allowUnsafeConfigurations: true
        image: percona/percona-xtradb-cluster-operator:1.1.0-proxysql
    #    imagePullSecrets:
    #      - name: private-registry-credentials
    #    annotations:
    #      iam.amazonaws.com/role: role-arn
    #    labels:
    #      rack: rack-22
    #    serviceType: ClusterIP
        resources:
          requests:
            memory: 500m
            cpu: 200m
    #      limits:
    #        memory: 1G
    #        cpu: 700m
    #    priorityClassName: high-priority
    #    nodeSelector:
    #      disktype: ssd
        affinity:
          antiAffinityTopologyKey: "none"
    #      advanced:
    #        nodeAffinity:
    #          requiredDuringSchedulingIgnoredDuringExecution:
    #            nodeSelectorTerms:
    #            - matchExpressions:
    #              - key: kubernetes.io/e2e-az-name
    #                operator: In
    #                values:
    #                - e2e-az1
    #                - e2e-az2
    #    tolerations:
    #    - key: "node.alpha.kubernetes.io/unreachable"
    #      operator: "Exists"
    #      effect: "NoExecute"
    #      tolerationSeconds: 6000
        volumeSpec:
    #      emptyDir: {}
    #      hostPath:
    #        path: /data
    #        type: Directory
          persistentVolumeClaim:
    #        storageClassName: standard
    #        accessModes: [ "ReadWriteOnce" ]
            resources:
              requests:
                storage: 2Gi
        podDisruptionBudget:
          maxUnavailable: 1
    #      minAvailable: 0
        gracePeriod: 30
      pmm:
        enabled: false
        image: perconalab/pmm-client:1.17.1
        serverHost: monitoring-service
        serverUser: pmm
      backup:
        image: percona/percona-xtradb-cluster-operator:1.1.0-backup
        serviceAccountName: percona-xtradb-cluster-operator
    #    imagePullSecrets:
    #      - name: private-registry-credentials
        storages:
          s3-us-west:
            type: s3
            s3:
              bucket: S3-BACKUP-BUCKET-NAME-HERE
              credentialsSecret: my-cluster-name-backup-s3
              region: us-west-2
          fs-pvc:
            type: filesystem
            volume:
              persistentVolumeClaim:
    #            storageClassName: standard
                accessModes: [ "ReadWriteOnce" ]
                resources:
                  requests:
                    storage: 6Gi
        schedule:
          - name: "sat-night-backup"
            schedule: "0 0 * * 6"
            keep: 3
            storageName: s3-us-west
          - name: "daily-backup"
            schedule: "0 0 * * *"
            keep: 5
            storageName: fs-pvc
